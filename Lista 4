QUESTÃO 1

#include<stdio.h> //declaração de biblioteca
#include<conio.h> //declaração de biblioteca
#include<stdlib.h> //declaração de biblioteca
#include<locale.h> //declaração de biblioteca

//A	
typedef struct Ingresso{  // função struct que armazena os dados do floar e char, usada com typedef para "renomear"
	float preco; //declaração de variavel na struct 
	char local[60]; //declaração de variavel na struct 
	char atracao[60]; //declaração de variavel na struct 
}Ingresso; // o nome da struct passa a ser Só Ingeresso

void preenche(Ingresso* i); // prototipo da função que recebe os dados 
void imprime(Ingresso* i); // prototipo da função que imprime os dados 
void altera_preco(Ingresso* i, float valor); // prototipo da função que altera o preço 
 void imprime_menor_maior_preco(int n, Ingresso* vet); // prototipo da função que imprime o maior e o menor preço

int main(void){
	setlocale(LC_ALL, "Portuguse"); // comando para renomear
	Ingresso *i; // //declaração de variavel 
	int n, v; //declaração de variavel 
	i=(Ingresso*)malloc(sizeof(Ingresso)); // alocação dinamica
	preenche(i); //chamada da função
	altera_preco(i, 10); //chamada da função
	imprime(i); // imprime os dados
	imprime_menor_maior_preco(n,i); // ler os dados da função maior e menor preço
	free(i); //libera a memoria
	return 0; // fim do programa
}

void preenche(Ingresso* i){ //função que ler os dados e armazena
	
	printf("Digite o local: : "); //solicita ao usuario o local
	scanf(" %[^\n]", &i->local); //ler o local e armazena
	printf("Digite a atração: ");  //solicita ao usuario a atração
	scanf(" %[^\n]", &i->atracao); //ler a atração e armazena
	printf("Digite o valor do ingresso: ");  //solicita ao usuario o preço do ingresso
	scanf(" %f", &i->preco); /ler o preço e armazena
}
//B
void imprime(Ingresso* i){ //função que imprime os dados
	printf("O valor do ingresso: %f\n ", i->preco); //imprime o valor do ingresso 
	printf("O local da atração: %s\n ", i->local);  //imprime o valor da atração
	printf("A atração: %s ", i->atracao);  //imprime da atração
		
}
//c
void altera_preco(Ingresso* i, float valor){ //função que altera o preço
	i->preco=valor;	 // troca o valor do preço
}

 void imprime_menor_maior_preco(int n, Ingresso* vet){ //função que compara os preços e imprime o maior
 	int maior=0; //declaração de variavel 
	int menor=0; //declaração de variavel
	int i; //declaração de variavel
 	for( i =0; i<n; i++){ //laço de repetição
 		if(maior<vet[i].preco){ //verifica se o preço é maior 
 			maior=vet[i].preco; // e armazena em maior
		 }
		 if(menor>vet[i].preco){ //verifica se o preço é menor
		 menor=vet[i].preco; // e armazena em menor
		 }
		 printf("O maior e menor respectivamente %d %d", maior, menor); //exibe o maior e menor
	 }
 
}

//QUESTÃO 2

#include<stdio.h> //declaração de biblioteca
#include<stdlib.h> //declaração de biblioteca


typedef struct Aluno{   // declaração da struct com o comando typedef que "renomeia" a estrutura
    int mat;  //declaração de variavel na struct 
    char nome[60]; //declaração de variavel na struct 
    char turma; //declaração de variavel na struct 
    float n1, n2, n3; //declaração de variavel na struct 
    float media; //declaração de variavel na struct 
}Aluno; // o nome da struct passa a ser Só Aluno

void matricula(int n, Aluno**alunos); // Protótipo da função que armazena os dados dos alunos
void lanca_notas(int n, Aluno**alunos); // Protótipo da função que armazena as notas dos alunos
void imprime_tudo(int n, Aluno** alunos); // Protótipo da função que imprime as informações dos alunos 
void imprime_turma(int n, Aluno** alunos, char turma); // Protótipo da função que imprime a média dos alunos
void imprime_turma_aprovados(int n,Aluno**alunos, char turma); // Protótipo da função que imprime a reprovação


int main(void){  // programa principal
    int i, n; //declaração de variavel
    Aluno**alunos; //declaração de variavel do tipo estrutura
    char turma; //declaração de variavel
    
    printf("Digite a quantidade de alunos:"); //solicita ao usuario a qtde de alunos
    scanf("%d", &n); // ler e armazena a qtde de alunos
    alunos=(Aluno**)malloc(n*sizeof(Aluno*)); // alocação do ponteiro dinamicamente
	
        matricula(n, alunos); // chamada da função 
        lanca_notas(n, alunos); // chamada da função
   		imprime_tudo(n, alunos); // chamada da função
   		imprime_turma( n, alunos, turma); // chamada da função
   		imprime_turma_aprovados(n,alunos,'a'); // chamada da função
   		free(alunos); //libera o vetor
        return 0; //fim programa
}

void matricula(int n, Aluno**alunos){  // função que recebe os dados dos alunos
        
    int j; //declaração de variavel
     if (j<0 || j>=n) { //compara se o indicie esta dentro ou fora do vetor declarado 
     printf("Indice fora do limite do vetor\n"); //exibe caso esteja
     exit(1); //finaliza programa
     }

        for(j=0;j<n;j++){ //laço de repetição que passa pela quantidade digitada de alunos 
    
    printf("\nDigite seu %d.o nome: ", j+1); //pedindo dados do usuario e armazendo-o de acordo com a quantidade digitade de pessoas no começo
    scanf(" %[^\n]",&alunos[j]->nome);
    printf("Digite sua %d.a turma: ", j+1); //pedindo dados do usuario e armazendo-o de acordo com a quantidade digitade de pessoas no começo
    scanf(" %[^\n]",&alunos[j]->turma);    
    printf("Digite sua %d.a matricula: ", j+1); //pedindo dados do usuario e armazendo-o de acordo com a quantidade digitade de pessoas no começo
    scanf("%d", &alunos[j]->mat);    
    }    
}
void lanca_notas(int n, Aluno**alunos){ // estrutura que lança as notas, pede ao usuario e a armazena
    int j;
   if (j<0 || j>=n) {
     printf("Indice fora do limite do vetor\n");
     exit(1);
     }
        for(j=0;j<n;j++){
    printf("Digite a %d.a nota: ", j+1); //solicita nota
    scanf(" %f",&alunos[j]->n1); //ler nota
    printf("Digite a %d.a nota: ", j+1); //solicita nota
    scanf(" %f",&alunos[j]->n2);   //ler nota
    printf("Digite a %d.a nota: ", j+1); //solicita nota
    scanf("%f", &alunos[j]->n3);    //ler nota
    alunos[j]->media=(alunos[j]->n1+alunos[j]->n2+alunos[j]->n3)/3; // calculo da media
    }
}
void imprime_tudo(int n, Aluno** alunos){ //função que recebe as medias e os dados dos alunos e a imprime
	   int j;
   if (j<0 || j>=n) {
     printf("Indice fora do limite do vetor\n"); // para saber se tem limite na memoria
     exit(1);
     }
        for(j=0;j<n;j++){
    printf("O nome do %d.o aluno = %s\n ", j+1,alunos[j]->nome );
    printf("A %d.a turma =%s:\n ", j+1, alunos[j]->turma);
    printf("A %d.a matricula= %d\n", j+1, alunos[j]->mat);
    printf("As notas = %.2f %.2f %.2f\n", alunos[j]->n1, alunos[j]->n2, alunos[j]->n3);
	printf("A %d.a Media = %.2f \n", j+1, alunos[j]->media);
}
}
void imprime_turma(int n, Aluno** alunos, char turma){ //função que mostra os dados da turma do aluno
		   int j;
   if (j<0 || j>=n) {
     printf("Indice fora do limite do vetor\n");
     exit(1);
     }
        for(j=0;j<n;j++){
    printf("O %d.o nome = %s\n ", j+1,alunos[j]->nome );
    printf("%d.a turma =%s\n ", j+1, alunos[j]->turma);
    printf("Matricula %d =%d \n", j+1, alunos[j]->mat);
}
}
void imprime_turma_aprovados(int n, Aluno**alunos, char turma){ //função para mostrar a turma 
    int j;
    for(j=0;j<n;j++){
        if(alunos[j]!=NULL && alunos[j]->turma==turma){
           if(alunos[j]->media>=7){
                printf("\n Matricula:  %s \n", alunos[j]->mat);
                printf("Nome: %s \n", alunos[j]->nome);
                printf("Media: %f \n, APROVADO \n", alunos[j]->media);
           }
        }
    }
}

//QUESTÃO 3

